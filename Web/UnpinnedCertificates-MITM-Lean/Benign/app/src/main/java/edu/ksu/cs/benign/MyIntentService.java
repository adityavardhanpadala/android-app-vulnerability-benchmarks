package edu.ksu.cs.benign;

import android.app.IntentService;
import android.content.Intent;
import android.util.Log;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;

/**
 * An {@link IntentService} subclass for handling asynchronous task requests in
 * a service on a separate handler thread.
 * <p>
 * TODO: Customize class - update intent actions, extra parameters and static
 * helper methods.
 */
public class MyIntentService extends IntentService {

    private static final String TAG = "TrustManagerExploit";

    public MyIntentService() {
        super("MyIntentService");
    }

    private String copyInputStreamToString(InputStream in) throws IOException {
        try {
            byte[] bytes = new byte[1024];
            StringBuilder sb = new StringBuilder();
            int numRead = 0;
            while ((numRead = in.read(bytes)) >= 0) {
                sb.append(new String(bytes, 0, numRead));
            }
            return sb.toString();
        } catch (IOException ex) {
            ex.printStackTrace();
            throw ex;
        }
    }

    @Override
    protected void onHandleIntent(Intent intent) {
        final Certificate ca;
        try (InputStream caInput = getApplication().getAssets().open("domain.crt")) {
            final CertificateFactory cf = CertificateFactory.getInstance("X.509");
            ca = cf.generateCertificate(caInput);

            final String keyStoreType = KeyStore.getDefaultType();
            final KeyStore keyStore = KeyStore.getInstance(keyStoreType);
            keyStore.load(null, null);
            keyStore.setCertificateEntry("ca", ca);

            // Create a TrustManager that trusts the CAs in our KeyStore
            final TrustManager trustManager[] = new TrustManager[]{new MyTrustManager()};

            // Create an SSLContext that uses our TrustManager
            final SSLContext context = SSLContext.getInstance("TLS");
            context.init(null, trustManager, null);

            // Tell the URLConnection to use a SocketFactory from our SSLContext
            final String urlString = "https://" + getResources().getString(R.string.local_server_ipv4) + ":" +
                    getResources().getString(R.string.local_server_port) + getResources().getString(R.string.url_extension);
            final URL url = new URL(urlString);
            final HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();
            urlConnection.setSSLSocketFactory(context.getSocketFactory());
            urlConnection.setHostnameVerifier(new HostnameVerifier() {
                @Override
                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            });

            final InputStream in = urlConnection.getInputStream();
            Log.d("Secure", "SUCCESS");
            result(copyInputStreamToString(in));
        } catch (CertificateException | NoSuchAlgorithmException | KeyStoreException | KeyManagementException e) {
            Log.d("Secure", "FAILURE");
            result("FAILURE");

        } catch (IOException e) {
            Log.d("Secure", "FAILURE");
            result("FAILURE");
        }
    }

    private void result(String res) {
        final Intent activityIntent = new Intent(this, ResponseActivity.class);
        activityIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        activityIntent.putExtra("status_msg", res);
        startActivity(activityIntent);
    }
}